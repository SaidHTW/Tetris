<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>70</x>
      <y>330</y>
      <w>60</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Player</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>290</x>
      <y>110</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Spiel starten
bg=#00fd02
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Systemborder</type>
    <coordinates>
      <x>220</x>
      <y>50</y>
      <w>310</w>
      <h>610</h>
    </coordinates>
    <panel_attributes>topcenter:Tetrix Game Use Case
bg=#000000

fg=white
layer=-1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>290</x>
      <y>510</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Spiel beenden
bg=#00fd02
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>290</x>
      <y>410</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Pausieren
bg=#00fd02
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>290</x>
      <y>310</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Informieren
bg=#00fd02
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>290</x>
      <y>210</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Tasten wählen
bg=#00fd02
layer=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>1350</w>
      <h>700</h>
    </coordinates>
    <panel_attributes>Use Case
--
bg=yellow
layer=-2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>590</x>
      <y>180</y>
      <w>700</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>HappyDayScenario
bg=black
fg=white
--


   1) Der Spieler startet das Spiel mit dem drücken der "Start" Taste.

   2) Das Spiel gibt die Steine per Zufall aus welche es vorher am LCD Feld anzeigt.

   3) Der Spieler Navigiert mit den rechts und links Tasten zur belibigen position innerhalb des Fensters.

   4) Das Spiel entfernt vollständige horizontale Linien und addiert diese im Ausgabefenster.

   5) Das Spiel gibt Punkte für jeden Spielzug an der entsprechenden Anzeige aus.

   6) Der Spieler Pausiert das Spiel durch das betätigen der "Pause" Taste um sich einen Kafee zu holen.

   7) Der Spieler setzt das Spiel fort durch erneutes Drücken der "Pause" Taste. 

   8) Der Spieler beendet das Spiel durch drücken der "Stop" Taste</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>740</y>
      <w>1350</w>
      <h>740</h>
    </coordinates>
    <panel_attributes>ClassDiagramm
--
bg=yellow
layer=-2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>60</x>
      <y>1160</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>_TetrixBoard:TetrixBoard_
--
: QFrame(parent)
{
    setFrameStyle(QFrame::Panel | QFrame::Sunken);
    setFocusPolicy(Qt::StrongFocus);
    isStarted = false;
    isPaused = false;
    clearBoard();

    nextPiece.setRandomShape();
}
//! [0]

//! [1]
void TetrixBoard::setNextPieceLabel(QLabel *label)
{
    nextPieceLabel = label;
}
//! [1]

//! [2]
QSize TetrixBoard::sizeHint() const
{
    return QSize(BoardWidth * 15 + frameWidth() * 2,
                 BoardHeight * 15 + frameWidth() * 2);
}

QSize TetrixBoard::minimumSizeHint() const
//! [2] //! [3]
{
    return QSize(BoardWidth * 5 + frameWidth() * 2,
                 BoardHeight * 5 + frameWidth() * 2);
}
//! [3]

//! [4]
void TetrixBoard::start()
{
    if (isPaused)
        return;

    isStarted = true;
    isWaitingAfterLine = false;
    numLinesRemoved = 0;
    numPiecesDropped = 0;
    score = 0;
    level = 1;
    clearBoard();

    emit linesRemovedChanged(numLinesRemoved);
    emit scoreChanged(score);
    emit levelChanged(level);

    newPiece();
    timer.start(timeoutTime(), this);
}
//! [4]

//! [5]
void TetrixBoard::pause()
{
    if (!isStarted)
        return;

    isPaused = !isPaused;
    if (isPaused) {
        timer.stop();
    } else {
        timer.start(timeoutTime(), this);
    }
    update();
//! [5] //! [6]
}
//! [6]

//! [7]
void TetrixBoard::paintEvent(QPaintEvent *event)
{
    QFrame::paintEvent(event);

    QPainter painter(this);
    QRect rect = contentsRect();
//! [7]

    if (isPaused) {
        painter.drawText(rect, Qt::AlignCenter, tr("Pause"));
        return;
    }

//! [8]
    int boardTop = rect.bottom() - BoardHeight*squareHeight();

    for (int i = 0; i &lt; BoardHeight; ++i) {
        for (int j = 0; j &lt; BoardWidth; ++j) {
            TetrixShape shape = shapeAt(j, BoardHeight - i - 1);
            if (shape != NoShape)
                drawSquare(painter, rect.left() + j * squareWidth(),
                           boardTop + i * squareHeight(), shape);
        }
//! [8] //! [9]
    }
//! [9]

//! [10]
    if (curPiece.shape() != NoShape) {
        for (int i = 0; i &lt; 4; ++i) {
            int x = curX + curPiece.x(i);
            int y = curY - curPiece.y(i);
            drawSquare(painter, rect.left() + x * squareWidth(),
                       boardTop + (BoardHeight - y - 1) * squareHeight(),
                       curPiece.shape());
        }
//! [10] //! [11]
    }
//! [11] //! [12]
}
//! [12]

//! [13]
void TetrixBoard::keyPressEvent(QKeyEvent *event)
{
    if (!isStarted || isPaused || curPiece.shape() == NoShape) {
        QFrame::keyPressEvent(event);
        return;
    }
//! [13]

//! [14]
    switch (event-&gt;key()) {
    case Qt::Key_Left:
        tryMove(curPiece, curX - 1, curY);
        break;
    case Qt::Key_Right:
        tryMove(curPiece, curX + 1, curY);
        break;
    case Qt::Key_Down:
        tryMove(curPiece.rotatedRight(), curX, curY);
        break;
    case Qt::Key_Up:
        tryMove(curPiece.rotatedLeft(), curX, curY);
        break;
    case Qt::Key_Space:
        dropDown();
        break;
    case Qt::Key_D:
        oneLineDown();
        break;
    default:
        QFrame::keyPressEvent(event);
    }
//! [14]
}

//! [15]
void TetrixBoard::timerEvent(QTimerEvent *event)
{
    if (event-&gt;timerId() == timer.timerId()) {
        if (isWaitingAfterLine) {
            isWaitingAfterLine = false;
            newPiece();
            timer.start(timeoutTime(), this);
        } else {
            oneLineDown();
        }
    } else {
        QFrame::timerEvent(event);
//! [15] //! [16]
    }
//! [16] //! [17]
}
//! [17]

//! [18]
void TetrixBoard::clearBoard()
{
    for (int i = 0; i &lt; BoardHeight * BoardWidth; ++i)
        board[i] = NoShape;
}
//! [18]

//! [19]
void TetrixBoard::dropDown()
{
    int dropHeight = 0;
    int newY = curY;
    while (newY &gt; 0) {
        if (!tryMove(curPiece, curX, newY - 1))
            break;
        --newY;
        ++dropHeight;
    }
    pieceDropped(dropHeight);
//! [19] //! [20]
}
//! [20]

//! [21]
void TetrixBoard::oneLineDown()
{
    if (!tryMove(curPiece, curX, curY - 1))
        pieceDropped(0);
}
//! [21]

//! [22]
void TetrixBoard::pieceDropped(int dropHeight)
{
    for (int i = 0; i &lt; 4; ++i) {
        int x = curX + curPiece.x(i);
        int y = curY - curPiece.y(i);
        shapeAt(x, y) = curPiece.shape();
    }

    ++numPiecesDropped;
    if (numPiecesDropped % 25 == 0) {
        ++level;
        timer.start(timeoutTime(), this);
        emit levelChanged(level);
    }

    score += dropHeight + 7;
    emit scoreChanged(score);
    removeFullLines();

    if (!isWaitingAfterLine)
        newPiece();
//! [22] //! [23]
}
//! [23]

//! [24]
void TetrixBoard::removeFullLines()
{
    int numFullLines = 0;

    for (int i = BoardHeight - 1; i &gt;= 0; --i) {
        bool lineIsFull = true;

        for (int j = 0; j &lt; BoardWidth; ++j) {
            if (shapeAt(j, i) == NoShape) {
                lineIsFull = false;
                break;
            }
        }

        if (lineIsFull) {
//! [24] //! [25]
            ++numFullLines;
            for (int k = i; k &lt; BoardHeight - 1; ++k) {
                for (int j = 0; j &lt; BoardWidth; ++j)
                    shapeAt(j, k) = shapeAt(j, k + 1);
            }
//! [25] //! [26]
            for (int j = 0; j &lt; BoardWidth; ++j)
                shapeAt(j, BoardHeight - 1) = NoShape;
        }
//! [26] //! [27]
    }
//! [27]

//! [28]
    if (numFullLines &gt; 0) {
        numLinesRemoved += numFullLines;
        score += 10 * numFullLines;
        emit linesRemovedChanged(numLinesRemoved);
        emit scoreChanged(score);

        timer.start(500, this);
        isWaitingAfterLine = true;
        curPiece.setShape(NoShape);
        update();
    }
//! [28] //! [29]
}
//! [29]

//! [30]
void TetrixBoard::newPiece()
{
    curPiece = nextPiece;
    nextPiece.setRandomShape();
    showNextPiece();
    curX = BoardWidth / 2 + 1;
    curY = BoardHeight - 1 + curPiece.minY();

    if (!tryMove(curPiece, curX, curY)) {
        curPiece.setShape(NoShape);
        timer.stop();
        isStarted = false;
    }
//! [30] //! [31]
}
//! [31]

//! [32]
void TetrixBoard::showNextPiece()
{
    if (!nextPieceLabel)
        return;

    int dx = nextPiece.maxX() - nextPiece.minX() + 1;
    int dy = nextPiece.maxY() - nextPiece.minY() + 1;

    QPixmap pixmap(dx * squareWidth(), dy * squareHeight());
    QPainter painter(&amp;pixmap);
    painter.fillRect(pixmap.rect(), nextPieceLabel-&gt;palette().background());

    for (int i = 0; i &lt; 4; ++i) {
        int x = nextPiece.x(i) - nextPiece.minX();
        int y = nextPiece.y(i) - nextPiece.minY();
        drawSquare(painter, x * squareWidth(), y * squareHeight(),
                   nextPiece.shape());
    }
    nextPieceLabel-&gt;setPixmap(pixmap);
//! [32] //! [33]
}
//! [33]

//! [34]
bool TetrixBoard::tryMove(const TetrixPiece &amp;newPiece, int newX, int newY)
{
    for (int i = 0; i &lt; 4; ++i) {
        int x = newX + newPiece.x(i);
        int y = newY - newPiece.y(i);
        if (x &lt; 0 || x &gt;= BoardWidth || y &lt; 0 || y &gt;= BoardHeight)
            return false;
        if (shapeAt(x, y) != NoShape)
            return false;
    }
//! [34]

//! [35]
    curPiece = newPiece;
    curX = newX;
    curY = newY;
    update();
    return true;
}
//! [35]

//! [36]
void TetrixBoard::drawSquare(QPainter &amp;painter, int x, int y, TetrixShape shape)
{
    static const QRgb colorTable[8] = {
        0x000000, 0xCC6666, 0x66CC66, 0x6666CC,
        0xCCCC66, 0xCC66CC, 0x66CCCC, 0xDAAA00
    };

    QColor color = colorTable[int(shape)];
    painter.fillRect(x + 1, y + 1, squareWidth() - 2, squareHeight() - 2,
                     color);

    painter.setPen(color.light());
    painter.drawLine(x, y + squareHeight() - 1, x, y);
    painter.drawLine(x, y, x + squareWidth() - 1, y);

    painter.setPen(color.dark());
    painter.drawLine(x + 1, y + squareHeight() - 1,
                     x + squareWidth() - 1, y + squareHeight() - 1);
    painter.drawLine(x + squareWidth() - 1, y + squareHeight() - 1,
                     x + squareWidth() - 1, y + 1);
}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>490</x>
      <y>1280</y>
      <w>210</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
TetrixShape
--
NoShape
ZShape
SShape
LineShape
TShape
SquareShape
LShape
MirroredLShape
XShape</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>60</x>
      <y>800</y>
      <w>210</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>bg=green
TetrixBoard
--

_public QFrame_
{
    Q_OBJECT

public:
    TetrixBoard(QWidget *parent = 0);

    void setNextPieceLabel(QLabel *label);
    QSize sizeHint() const Q_DECL_OVERRIDE;
    QSize minimumSizeHint() const Q_DECL_OVERRIDE;

public slots:
    void start();
    void pause();

signals:
    void scoreChanged(int score);
    void levelChanged(int level);
    void linesRemovedChanged(int numLines);

protected:
    void paintEvent(QPaintEvent *event) Q_DECL_OVERRIDE;
    void keyPressEvent(QKeyEvent *event) Q_DECL_OVERRIDE;
    void timerEvent(QTimerEvent *event) Q_DECL_OVERRIDE;
//! [0]

//! [1]
private:
    enum { BoardWidth = 10, BoardHeight = 22 };

    TetrixShape &amp;shapeAt(int x, int y) { return board[(y * BoardWidth) + x]; }
    int timeoutTime() { return 1000 / (1 + level); }
    int squareWidth() { return contentsRect().width() / BoardWidth; }
    int squareHeight() { return contentsRect().height() / BoardHeight; }
    void clearBoard();
    void dropDown();
    void oneLineDown();
    void pieceDropped(int dropHeight);
    void removeFullLines();
    void newPiece();
    void showNextPiece();
    bool tryMove(const TetrixPiece &amp;newPiece, int newX, int newY);
    void drawSquare(QPainter &amp;painter, int x, int y, TetrixShape shape);

    QBasicTimer timer;
    QPointer&lt;QLabel&gt; nextPieceLabel;
    bool isStarted;
    bool isPaused;
    bool isWaitingAfterLine;
    TetrixPiece curPiece;
    TetrixPiece nextPiece;
    int curX;
    int curY;
    int numLinesRemoved;
    int numPiecesDropped;
    int score;
    int level;
    TetrixShape board[BoardWidth * BoardHeight];
};</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>490</x>
      <y>800</y>
      <w>210</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>bg=green
TetrixPiece
--

public:
    TetrixPiece() { setShape(NoShape); }

    void setRandomShape();
    void setShape(TetrixShape shape);

    TetrixShape shape() const { return pieceShape; }
    int x(int index) const { return coords[index][0]; }
    int y(int index) const { return coords[index][1]; }
    int minX() const;
    int maxX() const;
    int minY() const;
    int maxY() const;
    TetrixPiece rotatedLeft() const;
    TetrixPiece rotatedRight() const;

private:
    void setX(int index, int x) { coords[index][0] = x; }
    void setY(int index, int y) { coords[index][1] = y; }

    TetrixShape pieceShape;
    int coords[4][2];</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1060</x>
      <y>1280</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>QLCDNumber</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>950</x>
      <y>1280</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>QLabel</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>1280</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>QPushButton</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>800</y>
      <w>210</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>bg=green
TetrixWindow
--
_public QWidget_
 Q_OBJECT

public:
    TetrixWindow();

private:
    QLabel *createLabel(const QString &amp;text);

    TetrixBoard *board;
    QLabel *nextPieceLabel;
    QLCDNumber *scoreLcd;
    QLCDNumber *levelLcd;
    QLCDNumber *linesLcd;
    QPushButton *startButton;
    QPushButton *quitButton;
    QPushButton *pauseButton;
};</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>150</x>
      <y>1060</y>
      <w>110</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>490</x>
      <y>1160</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>_TetrixPiece:TetrixPiece_
--
{
    static const int coordsTable[9][4][2] = {
        { { 0, 0 },   { 0, 0 },   { 0, 0 },   { 0, 0 } },
        { { 0, -1 },  { 0, 0 },   { -1, 0 },  { -1, 1 } },
        { { 0, -1 },  { 0, 0 },   { 1, 0 },   { 1, 1 } },
        { { 0, -1 },  { 0, 0 },   { 0, 1 },   { 0, 2 } },
        { { -1, 0 },  { 0, 0 },   { 1, 0 },   { 0, 1 } },
        { { 0, 0 },   { 1, 0 },   { 0, 1 },   { 1, 1 } },
        { { -1, -1 }, { 0, -1 },  { 0, 0 },   { 0, 1 } },
        { { 1, -1 },  { 0, -1 },  { 0, 0 },   { 0, 1 } },
        { { 1, 1 },  { 1, 1 },   { 1, 1 },   { 1, 1 } }
    };

    for (int i = 0; i &lt; 4 ; i++) {
        for (int j = 0; j &lt; 2; ++j)
            coords[i][j] = coordsTable[shape][i][j];
    }
    pieceShape = shape;
//! [1] //! [2]
}
//! [2]

//! [3]
int TetrixPiece::minX() const
{
    int min = coords[0][0];
    for (int i = 1; i &lt; 4; ++i)
        min = qMin(min, coords[i][0]);
    return min;
}

int TetrixPiece::maxX() const
//! [3] //! [4]
{
    int max = coords[0][0];
    for (int i = 1; i &lt; 4; ++i)
        max = qMax(max, coords[i][0]);
    return max;
}
//! [4]

//! [5]
int TetrixPiece::minY() const
{
    int min = coords[0][1];
    for (int i = 1; i &lt; 4; ++i)
        min = qMin(min, coords[i][1]);
    return min;
}

int TetrixPiece::maxY() const
//! [5] //! [6]
{
    int max = coords[0][1];
    for (int i = 1; i &lt; 4; ++i)
        max = qMax(max, coords[i][1]);
    return max;
}
//! [6]

//! [7]
TetrixPiece TetrixPiece::rotatedLeft() const
{
    if (pieceShape == SquareShape)
        return *this;

    TetrixPiece result;
    result.pieceShape = pieceShape;
    for (int i = 0; i &lt; 4; ++i) {
        result.setX(i, y(i));
        result.setY(i, -x(i));
    }
//! [7]
    return result;
}

//! [9]
TetrixPiece TetrixPiece::rotatedRight() const
{
    if (pieceShape == SquareShape)
        return *this;

    TetrixPiece result;
    result.pieceShape = pieceShape;
    for (int i = 0; i &lt; 4; ++i) {
        result.setX(i, -y(i));
        result.setY(i, x(i));
    }
//! [9]
    return result;
}
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>1160</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>_TetrixWindow:TetrixWindow_
--
 board = new TetrixBoard;
//! [0]

    nextPieceLabel = new QLabel;
    nextPieceLabel-&gt;setFrameStyle(QFrame::Box | QFrame::Raised);
    nextPieceLabel-&gt;setAlignment(Qt::AlignCenter);
    board-&gt;setNextPieceLabel(nextPieceLabel);

//! [1]
    scoreLcd = new QLCDNumber(5);
    scoreLcd-&gt;setSegmentStyle(QLCDNumber::Filled);
//! [1]
    levelLcd = new QLCDNumber(2);
    levelLcd-&gt;setSegmentStyle(QLCDNumber::Filled);
    linesLcd = new QLCDNumber(5);
    linesLcd-&gt;setSegmentStyle(QLCDNumber::Filled);

//! [2]
    startButton = new QPushButton(tr("&amp;Start"));
    startButton-&gt;setFocusPolicy(Qt::NoFocus);
    quitButton = new QPushButton(tr("&amp;Quit"));
    quitButton-&gt;setFocusPolicy(Qt::NoFocus);
    pauseButton = new QPushButton(tr("&amp;Pause"));
//! [2] //! [3]
    pauseButton-&gt;setFocusPolicy(Qt::NoFocus);
//! [3] //! [4]

    connect(startButton, SIGNAL(clicked()), board, SLOT(start()));
//! [4] //! [5]
    connect(quitButton , SIGNAL(clicked()), qApp, SLOT(quit()));
    connect(pauseButton, SIGNAL(clicked()), board, SLOT(pause()));
    connect(board, SIGNAL(scoreChanged(int)), scoreLcd, SLOT(display(int)));
    connect(board, SIGNAL(levelChanged(int)), levelLcd, SLOT(display(int)));
    connect(board, SIGNAL(linesRemovedChanged(int)),
            linesLcd, SLOT(display(int)));
//! [5]

//! [6]
    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(createLabel(tr("NEXT")), 0, 0);
    layout-&gt;addWidget(nextPieceLabel, 1, 0);
    layout-&gt;addWidget(createLabel(tr("LEVEL")), 2, 0);
    layout-&gt;addWidget(levelLcd, 3, 0);
    layout-&gt;addWidget(startButton, 4, 0);
    layout-&gt;addWidget(board, 0, 1, 6, 1);
    layout-&gt;addWidget(createLabel(tr("SCORE")), 0, 2);
    layout-&gt;addWidget(scoreLcd, 1, 2);
    layout-&gt;addWidget(createLabel(tr("LINES REMOVED")), 2, 2);
    layout-&gt;addWidget(linesLcd, 3, 2);
    layout-&gt;addWidget(quitButton, 4, 2);
    layout-&gt;addWidget(pauseButton, 5, 2);
    setLayout(layout);

    setWindowTitle(tr("Tetrix"));
    resize(550, 370);
}
//! [6]

//! [7]
QLabel *TetrixWindow::createLabel(const QString &amp;text)
{
    QLabel *lbl = new QLabel(text);
    lbl-&gt;setAlignment(Qt::AlignHCenter | Qt::AlignBottom);
    return lbl;
}
//! [7]

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>1060</y>
      <w>110</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>990</x>
      <y>1060</y>
      <w>110</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>900</x>
      <y>1220</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>990</x>
      <y>1220</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1080</x>
      <y>1220</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>1220</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>1180</y>
      <w>250</w>
      <h>40</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;20.0;230.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>1180</y>
      <w>230</w>
      <h>40</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;20.0;210.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>130</x>
      <y>140</y>
      <w>180</w>
      <h>240</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;220.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>130</x>
      <y>240</y>
      <w>180</w>
      <h>140</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;120.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>130</x>
      <y>330</y>
      <w>180</w>
      <h>50</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;30.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>130</x>
      <y>350</y>
      <w>180</w>
      <h>110</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;160.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>130</x>
      <y>350</y>
      <w>180</w>
      <h>210</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;160.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>1340</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>QPushButton</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>950</x>
      <y>1340</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>QLabel</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1060</x>
      <y>1340</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>QLCDNumber</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>880</x>
      <y>1300</y>
      <w>110</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>990</x>
      <y>1300</y>
      <w>110</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1100</x>
      <y>1300</y>
      <w>110</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>1530</y>
      <w>1350</w>
      <h>740</h>
    </coordinates>
    <panel_attributes>ZustandsDiagramm
--
bg=yellow
layer=-2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>140</x>
      <y>1660</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=initial</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>320</x>
      <y>1730</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>GameUI</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>320</x>
      <y>1820</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>StartGame
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>910</x>
      <y>1970</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>PauseButton
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>1180</x>
      <y>1970</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Quit Button
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>1660</y>
      <w>200</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[empty]</panel_attributes>
    <additional_attributes>180.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>1750</y>
      <w>140</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressStartButton]</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>170</x>
      <y>1830</y>
      <w>170</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressLeftArrow]</panel_attributes>
    <additional_attributes>10.0;140.0;10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>1840</y>
      <w>140</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressRightArrow]</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>1850</y>
      <w>200</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressUpArrow]</panel_attributes>
    <additional_attributes>90.0;120.0;90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>1840</y>
      <w>360</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressDownArrow]</panel_attributes>
    <additional_attributes>230.0;130.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>1830</y>
      <w>510</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressSpace]</panel_attributes>
    <additional_attributes>410.0;140.0;410.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>120</x>
      <y>1970</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>MoveLeft
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>270</x>
      <y>1970</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>MoveRight
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>430</x>
      <y>1970</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Rotate+90°
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>580</x>
      <y>1970</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Rotate-90°
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>760</x>
      <y>1970</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>GoDown
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>1820</y>
      <w>650</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressPause]</panel_attributes>
    <additional_attributes>550.0;150.0;550.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>720</x>
      <y>1980</y>
      <w>450</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
m2=[GamePaused]</panel_attributes>
    <additional_attributes>10.0;120.0;430.0;120.0;430.0;10.0;290.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>630</x>
      <y>2080</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>GameUI</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>60</x>
      <y>1810</y>
      <w>350</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
m2=[PressPause]</panel_attributes>
    <additional_attributes>270.0;10.0;10.0;10.0;10.0;290.0;330.0;290.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>390</x>
      <y>2080</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>PauseButton
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>480</x>
      <y>2090</y>
      <w>170</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>1810</y>
      <w>930</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[PressQuit]</panel_attributes>
    <additional_attributes>840.0;160.0;840.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>2000</y>
      <w>100</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
[QuitGame]</panel_attributes>
    <additional_attributes>10.0;140.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>1230</x>
      <y>2140</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=final</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
